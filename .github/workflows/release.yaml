name: Release Charts

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  release:
    permissions:
      contents: write
      
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          
      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Add dependency chart repos
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add k8sathome https://library-charts.k8s-at-home.com

      - name: Run chart-releaser
        env:
            GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
            CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          owner=$(cut -d '/' -f 1 <<< "$GITHUB_REPOSITORY")
          repo=$(cut -d '/' -f 2 <<< "$GITHUB_REPOSITORY")
  
          args=(--owner "$owner" --repo "$repo")
          args+=(--charts-dir "${{ inputs.charts_dir }}")
  
          if [[ -n "${{ inputs.version }}" ]]; then
              args+=(--version "${{ inputs.version }}")
          fi
  
          if [[ -n "${{ inputs.config }}" ]]; then
              args+=(--config "${{ inputs.config }}")
          fi
  
          if [[ -z "${{ inputs.install_dir }}" ]]; then
            install="$RUNNER_TOOL_CACHE/cr/${{ inputs.version }}/$(uname -m)"
            echo "$install" >> "$GITHUB_PATH"
            args+=(--install-dir "$install")
          else
            echo ${{ inputs.install_dir }} >> "$GITHUB_PATH"
            args+=(--install-dir "${{ inputs.install_dir }}")
          fi
  
          if [[ -n "${{ inputs.install_only }}" ]]; then
              args+=(--install-only "${{ inputs.install_only }}")
          fi
  
          if [[ -n "${{ inputs.skip_packaging }}" ]]; then
              args+=(--skip-packaging "${{ inputs.skip_packaging }}")
          fi
  
          if [[ -n "${{ inputs.skip_existing }}" ]]; then
              args+=(--skip-existing "${{ inputs.skip_existing }}")
          fi
  
          if [[ -n "${{ inputs.mark_as_latest }}" ]]; then
              args+=(--mark-as-latest "${{ inputs.mark_as_latest }}")
          fi
  
          if [[ -n "${{ inputs.packages_with_index }}" ]]; then
              args+=(--packages-with-index "${{ inputs.packages_with_index }}")
          fi
  
          if [[ -n "${{ inputs.pages_branch }}" ]]; then
              args+=(--pages-branch "${{ inputs.pages_branch }}")
          fi
  
          "./cr.sh" "${args[@]}"
  
          if [[ -f changed_charts.txt ]]; then
              cat changed_charts.txt >> "$GITHUB_OUTPUT"
          fi
          if [[ -f chart_version.txt ]]; then
              cat chart_version.txt >> "$GITHUB_OUTPUT"
          fi
          rm -f changed_charts.txt chart_version.txt
